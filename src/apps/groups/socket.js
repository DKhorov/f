import { io } from 'socket.io-client';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
const getSocketURL = () => {
  if (process.env.NODE_ENV === 'production') {
    return process.env.REACT_APP_SOCKET_URL || 'https://atomglidedev.ru';
  }
  return 'https://atomglidedev.ru';
};

// –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Socket.IO –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
export const createSocketConnection = (token) => {
  const socketURL = getSocketURL();
  
  console.log('üîó –°–æ–∑–¥–∞–Ω–∏–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫:', socketURL);
  
  const socket = io(socketURL, {
    auth: token ? { token } : {},
    query: token ? { token } : {},
    transports: ['websocket', 'polling'],
    reconnectionAttempts: 5,
    reconnectionDelay: 1000,
    timeout: 20000,
    forceNew: true
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  socket.on('connect', () => {
    console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
  });

  socket.on('disconnect', (reason) => {
    console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
  });

  socket.on('connect_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
  });

  socket.on('welcome', (data) => {
    console.log('üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
  });

  return socket;
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export const SOCKET_URL = getSocketURL(); 